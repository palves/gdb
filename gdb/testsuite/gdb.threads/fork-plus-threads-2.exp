# Copyright (C) 2015 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test verifies that several threads forking while another thread
# is constantly stepping over a breakpoint is properly handled.

standard_testfile

set linenum [gdb_get_line_number "set break here"]

proc do_test { detach_on_fork } {
    global GDBFLAGS
    global srcfile testfile
    global decimal gdb_prompt
    global linenum
    global is_remote_target

    set saved_gdbflags $GDBFLAGS
    set GDBFLAGS [concat $GDBFLAGS " -ex \"set non-stop on\""]

    if {[prepare_for_testing "failed to prepare" $testfile $srcfile {debug pthreads}] == -1} {
	set GDBFLAGS $saved_gdbflags
	return -1
    }

    set GDBFLAGS $saved_gdbflags

    if ![runto_main] then {
	fail "Can't run to main"
	return 0
    }

    set is_remote_target [gdb_is_target_remote]

    gdb_test_no_output "set detach-on-fork $detach_on_fork"

    gdb_test "break $linenum if zero == 1" \
	"Breakpoint .*" \
	"set breakpoint that evals false"

    set test "continue &"
    gdb_test_multiple $test $test {
	-re "$gdb_prompt " {
	    pass $test
	}
    }

    set fork_count 0
    set ok 0

    set test "inferior 1 exited"
    gdb_test_multiple "" $test {
	-re "Inferior 1 \(\[^\r\n\]+\) exited normally" {
	    pass $test
	    set ok 1
	}
	-re "Inferior $decimal \(\[^\r\n\]+\) exited normally" {
	    incr fork_count
	    if {$fork_count <= 100} {
		exp_continue
	    } else {
		fail "$test (too many forks)"
	    }
	}

	-re "$gdb_prompt " {
	    # Several errors end up at the top level, and printing the
	    # prompt.
	    if {!$is_remote_target} {
		setup_kfail "gdb/18749" "*-*-linux*"
	    }
	    fail $test
	}
	-re "Cannot access memory" {
	    if {!$is_remote_target} {
		setup_kfail "gdb/18749" "*-*-linux*"
	    }
	    fail $test
	}
    }

    if {!$ok} {
	# No use testing further.
	return
    }

    gdb_test "info threads" "No threads\." \
	"no threads left"

    gdb_test "info inferiors" \
	"Num\[ \t\]+Description\[ \t\]+Executable\[ \t\]+\r\n\\* 1 \[^\r\n\]+" \
	"only inferior 1 left"
}

foreach detach_on_fork {"on" "off"} {
    with_test_prefix "detach-on-fork=$detach_on_fork" {
	do_test $detach_on_fork
    }

    # The test passes with detach-on-fork off, but gdb seems to slow
    # down quadratically as inferiors are created, and then the test
    # takes annoyingly long to complete...
    break
}

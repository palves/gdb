# This testcase is part of GDB, the GNU debugger.

# Copyright 2015 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

standard_testfile

if [target_info exists gdb,nosignals] {
    verbose "Skipping ${testfile}.exp because of nosignals."
    return -1
}

if [prepare_for_testing "failed to prepare" ${testfile} ${srcfile} {debug}] {
    return -1
}

# The test proper.

proc do_test { always_inserted displaced } {
    if ![runto_main] then {
	fail "Can't run to main"
	return -1
    }

    gdb_test_no_output "set breakpoint always-inserted $always_inserted"
    gdb_test_no_output "set displaced-stepping $displaced"

    # Set breakpoint at "foo" and run to it.
    gdb_breakpoint "foo" message
    gdb_continue_to_breakpoint "foo"

    gdb_breakpoint "bar" message

    # Continue from "foo" to "bar" with a signal that is set to
    # SIG_IGN.  In this case, single-stepping immediately re-traps the
    # breakpoint at PC instead of stepping into the signal handler.
    # Even if breakpoint always-inserted is true, emulating the case
    # of other threads running, GDB should be able to step past the
    # breakpoint.

    if { $displaced == "on" } {
	# GDB gets this wrong with displaced stepping however, and
	# stops for the breakpoint at "foo" again.
	setup_kfail gdb/18225 "*-*-*"
    }
    gdb_test "signal SIGUSR1" "Breakpoint .* bar .*" "continue to bar"
}

foreach always_inserted {"off" "on"} {
    foreach displaced {"off" "on"} {
	with_test_prefix "always_inserted=$always_inserted: displaced=$displaced" {
	    do_test $always_inserted $displaced
	}
    }
}

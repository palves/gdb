# Copyright 2004-2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# interp.exp   Test interpreter-exec command

# [Sun Aug 16 00:14:10 2020] amdgpu: Started evicting pasid 0x8003
# [Sun Aug 16 00:14:10 2020] amdgpu: Evicting PASID 0x8003 queues
# [Sun Aug 16 00:14:10 2020] amdgpu: Finished evicting pasid 0x8003
# [Sun Aug 16 00:21:53 2020] gmc_v9_0_process_interrupt: 15 callbacks suppressed
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu: [gfxhub0] no-retry page fault (src_id:0 ring:88 vmid:15 pasid:32772, for process interp pid 55365 thread interp pid 55365)
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu:   in page starting at address 0x0000000000000000 from client 27
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu: VM_L2_PROTECTION_FAULT_STATUS:0x00F012B0
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu:          Faulty UTCL2 client ID: 0x9
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu:          MORE_FAULTS: 0x0
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu:          WALKER_ERROR: 0x0
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu:          PERMISSION_FAULTS: 0xb
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu:          MAPPING_ERROR: 0x0
# [Sun Aug 16 00:21:53 2020] amdgpu 0000:2f:00.0: amdgpu:          RW: 0x0
# [Sun Aug 16 00:21:53 2020] amdgpu: Evicting PASID 0x8004 queues
# [Sun Aug 16 00:22:09 2020] kfd kfd: amdgpu: Process 56079 (pasid 0x8004) got unhandled exception
return

standard_testfile

if { [prepare_for_testing "failed to prepare" ${testfile} $srcfile {debug}] } {
    return -1
}

# Do not use gdb_test for this test, since it has two prompts.
set cmd "interpreter-exec mi \"-var-update *\""
gdb_test_multiple $cmd $cmd {
    -re "\\^done,changelist=\\\[\\\]\r\n$gdb_prompt " {
	pass "$cmd"
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}
gdb_test "interpreter-exec console \"show version\"" "GNU gdb .*"

# Regression test for crash when an exception occurs in mi_parse.
gdb_test_multiple "interpreter-exec mi \"-break-insert --thread a\"" \
    "regression test for mi_parse crash" {
	-re ".error,msg=.Invalid value for the '--thread' option.\r\n$gdb_prompt " {
	    pass "$cmd"
	    gdb_expect 1 {
		-re "\r\n$gdb_prompt $" { }
	    }
	}
    }

set cmd "interpreter-exec mi \"-stack-info-frame\""
gdb_test_multiple $cmd $cmd {
    -re ".error,msg=.No registers\..\r\n$gdb_prompt " {
	pass "$cmd"
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}

set cmd "interpreter-exec mi1 \"-break-insert main\""
gdb_test_multiple $cmd $cmd {
    -re ".done.bkpt=.number=.\[0-9\]\[^\n\]+\r\n$gdb_prompt " {
	pass "$cmd"
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}

set cmd "interpreter-exec mi2 \"-break-insert main\""
gdb_test_multiple $cmd $cmd {
    -re ".done.bkpt=.number=.\[0-9\]\[^\n\]+\r\n$gdb_prompt " {
	pass "$cmd"
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}

set cmd "interpreter-exec mi3 \"-break-insert main\""
gdb_test_multiple $cmd $cmd {
    -re ".done.bkpt=.number=.\[0-9\]\[^\n\]+\r\n$gdb_prompt " {
	pass "$cmd"
	gdb_expect 1 {
	    -re "\r\n$gdb_prompt $" { }
	}
    }
}

if ![runto_main] then {
  fail "run to main"
  return -1
}

gdb_test "list" ".*\[0-9\].*main \\(int argc.*" "can list sources"
gdb_exit

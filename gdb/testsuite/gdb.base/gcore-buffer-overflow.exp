# Copyright 2007-2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test GDB's internal buffers safety for the GCORE command.

# dmesg showed:
#
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu: [gfxhub0] no-retry page fault (src_id:0 ring:40 vmid:15 pasid:32772, for process gcore-buffer-ov pid 76479 thread gcore-buffer-ov pid 76479)
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu:   in page starting at address 0x0000000000a48000 from client 27
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu: VM_L2_PROTECTION_FAULT_STATUS:0x00F40A51
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu:          Faulty UTCL2 client ID: 0x5
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu:          MORE_FAULTS: 0x1
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu:          WALKER_ERROR: 0x0
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu:          PERMISSION_FAULTS: 0x5
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu:          MAPPING_ERROR: 0x0
# [Sat Aug 15 23:16:33 2020] amdgpu 0000:2f:00.0: amdgpu:          RW: 0x1
return

standard_testfile .c
# The ${binfile} basename needs to exceed 80 characters (`sizeof (psargs)')
# plus some additional data to overwrite the stack frame.
set pattern  01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
append binfile -${pattern}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
     untested "failed to compile"
     return -1
}

# Start with a fresh gdb.

clean_restart ${binfile}

gdb_test_no_output "set args ${pattern}"	\
    "set buffer exceeding arguments"

if { ! [ runto_main ] } then {
    untested "could not run to main"
    return -1
}

gdb_gcore_cmd [standard_output_file gcore-buffer-overflow.test] \
    "save a corefile"
